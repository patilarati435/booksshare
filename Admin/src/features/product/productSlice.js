import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {createProduct,getProducts} from "./productAPI"

const initialState = {
 product: null,
  status: 'idle',
};


export const createProductAsync = createAsyncThunk(
  'user/createProduct',
  async (item) => {
    const response = await createProduct(item);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const getProductsAsync = createAsyncThunk(
  'user/getProduct',
  async (product) => {
    const response = await getProducts(product);
    // The value we return becomes the `fulfilled` action payload
   console.log(response)
    return response;
  }
);


export const counterSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
    
      state.value += 1;
    }
  
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createProductAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createProductAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.product = action.payload;
      })
      .addCase(getProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.product = action.payload;
      })
  },
});


export const selectProduct = (state)=>state.auth.product
export const selectError = (state)=>state.auth.error;
export const { increment} = counterSlice.actions;
export default counterSlice.reducer;
